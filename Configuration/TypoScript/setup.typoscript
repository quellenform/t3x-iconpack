plugin.tx_iconpack {
  settings {
    # If you change the CSS class, please also note that you have to change it in your CSS files accordingly!
    #   You can also remove this completely if you don't need it.
    cssClass = {$plugin.tx_iconpack.cssClass}
    # Define the order of the renderTypes here.
    #   If an Iconpack provides one of the types defined here (separated by commas), it will be used (the order is crucial!).
    #   This can be specified differently for icons from a field or the RTE with the keys "native" and "rte".
    #   Available values: svgInline, svgSprite, webfont, svg
    renderTypes {
      # Override default values for all iconpacks
      _default {
         native = {$plugin.tx_iconpack.renderTypesNative}
         rte = {$plugin.tx_iconpack.renderTypesRte}
      }
      # Override values only for specific iconpacks by using their key
      #fa6 {
      #   native = svgInline
      #}
      #glyphicons = webfont
    }
  }
}

# Set templates and dataProcessing
lib.contentElement {
  partialRootPaths {
    # The template is included here so that it is applied in a typical configuration at the end of all previous templates.
    5 = EXT:iconpack/Resources/Private/Partials/FluidStyledContent/
  }
  dataProcessing {
    # If you don't use 'lib.parseFunc_RTE.nonTypoTagUserFunc', this is required to render icons in RTE fields!
    # The output is then controlled exclusively by the DataProcessor and then cleaned up by the Sanitizer.
    #
    # In this case the "bodytext" field is used, but you can also use your own RTE fields with this configuration.
    #2212170002 = Quellenform\Iconpack\DataProcessing\IconpackProcessor
    #2212170002 {
    #  fieldName = bodytext
    #  fieldType = rte
    #}
    # If you don't want to use the provided ViewHelper, you can render individual iconfig fields directly:
    #[number] = Quellenform\Iconpack\DataProcessing\IconpackProcessor
    #[number] {
    #  fieldName = myCustomField
    #  fieldType = native
    #}
  }
  settings {
    iconpack < plugin.tx_iconpack.settings
  }
}

# Add default CSS
page.includeCSS {
  iconpack = {$plugin.tx_iconpack.cssFile}
}

# This is required if you want to see the inline SVG generated by the extension in the frontend.
#
# Here all tags are defined, which are NOT removed by the parser in principle.
# Without this instruction the content from the database will not be displayed in the frontend!
# If you use your own configuration, make sure that this statement is included at the end, or is not overwritten by other statements.
# Note: Even if you allow certain tags here, the sanitizer still decides whether these tags actually end up in the frontend or not!
lib.parseFunc_RTE.allowTags := addToList(icon, svg, use, g, line, path, polyline, polygon, rect, circle, ellipse, image, desc, defs, linearGradient, radialGradient, stop)

# If you don't use inline SVG, but only SVG sprites or webfonts, you can also reduce this to the following statement:
#lib.parseFunc_RTE.allowTags := addToList(svg, use)

# Restrict various attributes in SVG elements
lib.parseFunc_RTE.nonTypoTagStdWrap.HTMLparser.tags.svg.allowedAttribs = id, name, class, style, fill, viewBox, xmlns, width, height, role, aria-hidden

# Render icons in RTE fields
lib.parseFunc_RTE.nonTypoTagUserFunc = Quellenform\Iconpack\UserFunc\ParseFuncRte->replaceIcons
lib.parseFunc.nonTypoTagUserFunc < lib.parseFunc_RTE.nonTypoTagUserFunc
